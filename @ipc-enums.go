package z

// REMINDER TO SELF, on the rare update also update corresponding String()ers at the bottom end of the file

type IpcIDs uint8

const (
	_ IpcIDs = iota

	IPCID_MENUS_MAIN
	IPCID_MENUS_PKGS
	IPCID_MENUS_TOOLS

	IPCID_OBJ_SNAPSHOT
	IPCID_CFG_RESETALL
	IPCID_CFG_LIST
	IPCID_CFG_SET
	IPCID_NOTIFY_INFO
	IPCID_NOTIFY_WARN
	IPCID_NOTIFY_ERR

	IPCID_PROJ_CHANGED
	IPCID_PROJ_POLLEVTS

	IPCID_SRCDIAG_LIST
	IPCID_SRCDIAG_RUN_CURFILE
	IPCID_SRCDIAG_RUN_OPENFILES
	IPCID_SRCDIAG_RUN_ALLFILES
	IPCID_SRCDIAG_FORGETALL
	IPCID_SRCDIAG_PEEKHIDDEN
	IPCID_SRCDIAG_PUB
	IPCID_SRCDIAG_AUTO_TOGGLE
	IPCID_SRCDIAG_AUTO_ALL
	IPCID_SRCDIAG_AUTO_NONE
	IPCID_SRCDIAG_STARTED
	IPCID_SRCDIAG_FINISHED

	IPCID_SRCMOD_FMT_SETDEFMENU
	IPCID_SRCMOD_FMT_SETDEFPICK
	IPCID_SRCMOD_FMT_RUNONFILE
	IPCID_SRCMOD_FMT_RUNONSEL
	IPCID_SRCMOD_RENAME
	IPCID_SRCMOD_ACTIONS

	IPCID_SRCINTEL_HOVER
	IPCID_SRCINTEL_SYMS_FILE
	IPCID_SRCINTEL_SYMS_PROJ
	IPCID_SRCINTEL_CMPL_ITEMS
	IPCID_SRCINTEL_CMPL_DETAILS
	IPCID_SRCINTEL_HIGHLIGHTS
	IPCID_SRCINTEL_SIGNATURE
	IPCID_SRCINTEL_REFERENCES
	IPCID_SRCINTEL_DEFSYM
	IPCID_SRCINTEL_DEFTYPE
	IPCID_SRCINTEL_DEFIMPL

	IPCID_EXTRAS_INTEL_LIST
	IPCID_EXTRAS_INTEL_RUN
	IPCID_EXTRAS_QUERY_LIST
	IPCID_EXTRAS_QUERY_RUN

	IPCID_MIN_INVALID // new entries go above this one
)

type DiagSeverity int

const (
	DIAG_SEV_ERR DiagSeverity = iota
	DIAG_SEV_WARN
	DIAG_SEV_INFO
	DIAG_SEV_HINT

	DIAG_MIN_INVALID // new entries go above this one
)

type Symbol uint8

const (
	SYM_FILE Symbol = iota
	SYM_MODULE
	SYM_NAMESPACE
	SYM_PACKAGE
	SYM_CLASS
	SYM_METHOD
	SYM_PROPERTY
	SYM_FIELD
	SYM_CONSTRUCTOR
	SYM_ENUM
	SYM_INTERFACE
	SYM_FUNCTION
	SYM_VARIABLE
	SYM_CONSTANT
	SYM_STRING
	SYM_NUMBER
	SYM_BOOLEAN
	SYM_ARRAY
	SYM_OBJECT
	SYM_KEY
	SYM_NULL
	SYM_ENUMMEMBER
	SYM_STRUCT
	SYM_EVENT
	SYM_OPERATOR
	SYM_TYPEPARAMETER

	SYM_MIN_INVALID // new entries go above this one
)

type Completion uint8

const (
	CMPL_TEXT Completion = iota
	CMPL_METHOD
	CMPL_FUNCTION
	CMPL_CONSTRUCTOR
	CMPL_FIELD
	CMPL_VARIABLE
	CMPL_CLASS
	CMPL_INTERFACE
	CMPL_MODULE
	CMPL_PROPERTY
	CMPL_UNIT
	CMPL_VALUE
	CMPL_ENUM
	CMPL_KEYWORD
	CMPL_SNIPPET
	CMPL_COLOR
	CMPL_FILE
	CMPL_REFERENCE
	CMPL_FOLDER
	CMPL_ENUMMEMBER
	CMPL_CONSTANT
	CMPL_STRUCT
	CMPL_EVENT
	CMPL_OPERATOR
	CMPL_TYPEPARAMETER

	CMPL_MIN_INVALID // new entries go above this one
)

// Stringers below.
// Yes go generate exists. Not into it. One day I'll generate stuff like this with gomacro, for now manual werks as changes are rare

func (me IpcIDs) String() string {
	switch me {
	case IPCID_MENUS_MAIN:
		return "IPCID_MENUS_MAIN"
	case IPCID_MENUS_PKGS:
		return "IPCID_MENUS_PKGS"
	case IPCID_MENUS_TOOLS:
		return "IPCID_MENUS_TOOLS"
	case IPCID_OBJ_SNAPSHOT:
		return "IPCID_OBJ_SNAPSHOT"
	case IPCID_CFG_RESETALL:
		return "IPCID_CFG_RESETALL"
	case IPCID_CFG_LIST:
		return "IPCID_CFG_LIST"
	case IPCID_CFG_SET:
		return "IPCID_CFG_SET"
	case IPCID_NOTIFY_INFO:
		return "IPCID_NOTIFY_INFO"
	case IPCID_NOTIFY_WARN:
		return "IPCID_NOTIFY_WARN"
	case IPCID_NOTIFY_ERR:
		return "IPCID_NOTIFY_ERR"
	case IPCID_PROJ_CHANGED:
		return "IPCID_PROJ_CHANGED"
	case IPCID_PROJ_POLLEVTS:
		return "IPCID_PROJ_POLLEVTS"
	case IPCID_SRCDIAG_LIST:
		return "IPCID_SRCDIAG_LIST"
	case IPCID_SRCDIAG_RUN_CURFILE:
		return "IPCID_SRCDIAG_RUN_CURFILE"
	case IPCID_SRCDIAG_RUN_OPENFILES:
		return "IPCID_SRCDIAG_RUN_OPENFILES"
	case IPCID_SRCDIAG_RUN_ALLFILES:
		return "IPCID_SRCDIAG_RUN_ALLFILES"
	case IPCID_SRCDIAG_FORGETALL:
		return "IPCID_SRCDIAG_FORGETALL"
	case IPCID_SRCDIAG_PEEKHIDDEN:
		return "IPCID_SRCDIAG_PEEKHIDDEN"
	case IPCID_SRCDIAG_PUB:
		return "IPCID_SRCDIAG_PUB"
	case IPCID_SRCDIAG_AUTO_TOGGLE:
		return "IPCID_SRCDIAG_AUTO_TOGGLE"
	case IPCID_SRCDIAG_AUTO_ALL:
		return "IPCID_SRCDIAG_AUTO_ALL"
	case IPCID_SRCDIAG_AUTO_NONE:
		return "IPCID_SRCDIAG_AUTO_NONE"
	case IPCID_SRCDIAG_STARTED:
		return "IPCID_SRCDIAG_STARTED"
	case IPCID_SRCDIAG_FINISHED:
		return "IPCID_SRCDIAG_FINISHED"
	case IPCID_SRCMOD_FMT_SETDEFMENU:
		return "IPCID_SRCMOD_FMT_SETDEFMENU"
	case IPCID_SRCMOD_FMT_SETDEFPICK:
		return "IPCID_SRCMOD_FMT_SETDEFPICK"
	case IPCID_SRCMOD_FMT_RUNONFILE:
		return "IPCID_SRCMOD_FMT_RUNONFILE"
	case IPCID_SRCMOD_FMT_RUNONSEL:
		return "IPCID_SRCMOD_FMT_RUNONSEL"
	case IPCID_SRCMOD_RENAME:
		return "IPCID_SRCMOD_RENAME"
	case IPCID_SRCMOD_ACTIONS:
		return "IPCID_SRCMOD_ACTIONS"
	case IPCID_SRCINTEL_HOVER:
		return "IPCID_SRCINTEL_HOVER"
	case IPCID_SRCINTEL_SYMS_FILE:
		return "IPCID_SRCINTEL_SYMS_FILE"
	case IPCID_SRCINTEL_SYMS_PROJ:
		return "IPCID_SRCINTEL_SYMS_PROJ"
	case IPCID_SRCINTEL_CMPL_ITEMS:
		return "IPCID_SRCINTEL_CMPL_ITEMS"
	case IPCID_SRCINTEL_CMPL_DETAILS:
		return "IPCID_SRCINTEL_CMPL_DETAILS"
	case IPCID_SRCINTEL_HIGHLIGHTS:
		return "IPCID_SRCINTEL_HIGHLIGHTS"
	case IPCID_SRCINTEL_SIGNATURE:
		return "IPCID_SRCINTEL_SIGNATURE"
	case IPCID_SRCINTEL_REFERENCES:
		return "IPCID_SRCINTEL_REFERENCES"
	case IPCID_SRCINTEL_DEFSYM:
		return "IPCID_SRCINTEL_DEFSYM"
	case IPCID_SRCINTEL_DEFTYPE:
		return "IPCID_SRCINTEL_DEFTYPE"
	case IPCID_SRCINTEL_DEFIMPL:
		return "IPCID_SRCINTEL_DEFIMPL"
	case IPCID_EXTRAS_INTEL_LIST:
		return "IPCID_EXTRAS_INTEL_LIST"
	case IPCID_EXTRAS_INTEL_RUN:
		return "IPCID_EXTRAS_INTEL_RUN"
	case IPCID_EXTRAS_QUERY_LIST:
		return "IPCID_EXTRAS_QUERY_LIST"
	case IPCID_EXTRAS_QUERY_RUN:
		return "IPCID_EXTRAS_QUERY_RUN"
	}
	return Strf("%d", me)
}

func (me DiagSeverity) String() string {
	switch me {
	case DIAG_SEV_ERR:
		return "DIAG_SEV_ERR"
	case DIAG_SEV_WARN:
		return "DIAG_SEV_WARN"
	case DIAG_SEV_INFO:
		return "DIAG_SEV_INFO"
	case DIAG_SEV_HINT:
		return "DIAG_SEV_HINT"
	}
	return Strf("%d", me)
}

func (me Symbol) String() string {
	switch me {
	case SYM_FILE:
		return "SYM_FILE"
	case SYM_MODULE:
		return "SYM_MODULE"
	case SYM_NAMESPACE:
		return "SYM_NAMESPACE"
	case SYM_PACKAGE:
		return "SYM_PACKAGE"
	case SYM_CLASS:
		return "SYM_CLASS"
	case SYM_METHOD:
		return "SYM_METHOD"
	case SYM_PROPERTY:
		return "SYM_PROPERTY"
	case SYM_FIELD:
		return "SYM_FIELD"
	case SYM_CONSTRUCTOR:
		return "SYM_CONSTRUCTOR"
	case SYM_ENUM:
		return "SYM_ENUM"
	case SYM_INTERFACE:
		return "SYM_INTERFACE"
	case SYM_FUNCTION:
		return "SYM_FUNCTION"
	case SYM_VARIABLE:
		return "SYM_VARIABLE"
	case SYM_CONSTANT:
		return "SYM_CONSTANT"
	case SYM_STRING:
		return "SYM_STRING"
	case SYM_NUMBER:
		return "SYM_NUMBER"
	case SYM_BOOLEAN:
		return "SYM_BOOLEAN"
	case SYM_ARRAY:
		return "SYM_ARRAY"
	case SYM_OBJECT:
		return "SYM_OBJECT"
	case SYM_KEY:
		return "SYM_KEY"
	case SYM_NULL:
		return "SYM_NULL"
	case SYM_ENUMMEMBER:
		return "SYM_ENUMMEMBER"
	case SYM_STRUCT:
		return "SYM_STRUCT"
	case SYM_EVENT:
		return "SYM_EVENT"
	case SYM_OPERATOR:
		return "SYM_OPERATOR"
	case SYM_TYPEPARAMETER:
		return "SYM_TYPEPARAMETER"
	}
	return Strf("%d", me)
}

func (me Completion) String() string {
	switch me {
	case CMPL_TEXT:
		return "CMPL_TEXT"
	case CMPL_METHOD:
		return "CMPL_METHOD"
	case CMPL_FUNCTION:
		return "CMPL_FUNCTION"
	case CMPL_CONSTRUCTOR:
		return "CMPL_CONSTRUCTOR"
	case CMPL_FIELD:
		return "CMPL_FIELD"
	case CMPL_VARIABLE:
		return "CMPL_VARIABLE"
	case CMPL_CLASS:
		return "CMPL_CLASS"
	case CMPL_INTERFACE:
		return "CMPL_INTERFACE"
	case CMPL_MODULE:
		return "CMPL_MODULE"
	case CMPL_PROPERTY:
		return "CMPL_PROPERTY"
	case CMPL_UNIT:
		return "CMPL_UNIT"
	case CMPL_VALUE:
		return "CMPL_VALUE"
	case CMPL_ENUM:
		return "CMPL_ENUM"
	case CMPL_KEYWORD:
		return "CMPL_KEYWORD"
	case CMPL_SNIPPET:
		return "CMPL_SNIPPET"
	case CMPL_COLOR:
		return "CMPL_COLOR"
	case CMPL_FILE:
		return "CMPL_FILE"
	case CMPL_REFERENCE:
		return "CMPL_REFERENCE"
	case CMPL_FOLDER:
		return "CMPL_FOLDER"
	case CMPL_ENUMMEMBER:
		return "CMPL_ENUMMEMBER"
	case CMPL_CONSTANT:
		return "CMPL_CONSTANT"
	case CMPL_STRUCT:
		return "CMPL_STRUCT"
	case CMPL_EVENT:
		return "CMPL_EVENT"
	case CMPL_OPERATOR:
		return "CMPL_OPERATOR"
	case CMPL_TYPEPARAMETER:
		return "CMPL_TYPEPARAMETER"
	}
	return Strf("%d", me)
}
